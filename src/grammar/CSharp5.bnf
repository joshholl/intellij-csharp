{

parserClass="com.github.joshholl.intellij.csharp.lang.parser.CSharpParser"
extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

psiClassPrefix="CSharp"
psiImplClassSuffix="Impl"
psiPackage="com.github.joshholl.intellij.csharp.lang.psi"
psiImplPackage="com.github.joshholl.intellij.csharp.lang.psi.impl"

elementTypeHolderClass="com.github.joshholl.intellij.csharp.lang.lexer.CSharpTokenTypes"
elementTypeClass="com.github.joshholl.intellij.csharp.lang.lexer.CSharpElementType"
tokenTypeClass="com.github.joshholl.intellij.csharp.lang.lexer.CSharpElementType"

}

//basic concepts
namespace_name::=namespace_or_type_name
type_name::= namespace_or_type_name
namespace_or_type_name::= (identifier   [type_argument_list]) [ ',' (identifier [type_argument_list])]| qualified_alias_member

// types
type::=( non_array_type | array_type)
non_array_type::=( type_name | simple_type | enum_type| type_parameter | class_type | interface_type | delegate_type)
    ['?']
array_type::=non_array_type rank_specifiers+
simple_type::= numeric_type | 'bool'
numeric_type::=integral_type | floating_point_type | 'decimal'
integral_type::= ('sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char')
floating_point_type::= 'float' | 'double'
enum_type::= type_name
class_type::= type_name | 'object' | 'dynamic' | 'string'
interface_type::= type_name
rank_specifiers::= rank_specifier *
delegate_type::= type_name
type_argument_list::= '<' type_arguments '>'
type_arguments::= type_argument [( ',' type_argument)*]
type_argument::=type
type_parameter::=identifier
predefined_type::= 'bool' | 'byte' | 'char' | 'decimal' | 'double'| 'float' | 'int' | 'long' | 'object' | 'sbyte'
    | 'short' | 'string' | 'uint' | 'ulong' | 'ushort'

//variables
variable_reference::=expression

//types

//Expressions
argument_list::= argument | (',' argument) *
argument::= [argument_name]  argument_value
argument_name::= identifier ':'
argument_value::= expression | ('ref'   variable_reference) | ('out'   variable_reference)


array_creation_expression::= ('new' non_array_type '[' expression_list ']' [rank_specifiers] [array_initializer])
    | ('new' array_type array_initializer) | ('new' rank_specifier array_initializer)

simple_name::=identifier [type_argument_list]
parenthesized_expression::= '(' expression ')'

primary_expression::= base_primary_expression expression_trail*
member_access::= base_primary_expression expression_trail+
invocation_expression::=base_primary_expression expression_trail+
post_increment_expression::=base_primary_expression expression_trail+
post_decrement_expression::=base_primary_expression expression_trail+

private expression_trail::=(
     '(' [argument_list] ')'
     '[' (expression_list | expression) ']'
     | '--'
     | '++'
     | '.' identifier [type_argument_list]
     )


private base_primary_expression::= (
    array_creation_expression
    | literal
    | simple_name
    | parenthesized_expression
    | predefined_type '.' identifier [type_argument_list]
    | qualified_alias_member '.' identifier
    | array_creation_expression '(' [argument_list] ')'
    | this_access
    | base_access
    | object_creation_expression
    | delegate_creation_expression
    | anonymous_object_creation_expression
    | typeof_expression
    | checked_expression
    | unchecked_expression
    | default_value_expression
    | anonymous_method_expression)



this_access::='this'
base_access::=( 'base' '.' identifier) | ( 'base' '['  argument_list ']' )


object_creation_expression::= ('new' type '('  [argument_list] ')' [object_or_collection_initializer])
    | ('new' type  object_or_collection_initializer)

object_or_collection_initializer::= object_initializer | collection_initializer
object_initializer::= ( '{' [member_initializer_list] '}' ) | ( '{' member_initializer_list   ','   '}')
member_initializer_list::= member_initializer ( ',' member_initializer) *
member_initializer::= identifier '='  initializer_value
initializer_value::= expression | object_or_collection_initializer
collection_initializer::= ('{' element_initializer_list '}') | ('{' element_initializer_list ',' '}')
element_initializer_list::= element_initializer ( ','  element_initializer) *
element_initializer::= non_assignment_expression | ('{'  expression_list '}')
expression_list::=expression ( ','  expression) *

delegate_creation_expression::= ('new' delegate_type '(' expression ')')

anonymous_object_creation_expression::= 'new' anonymous_object_initializer

anonymous_object_initializer::=( '{' [member_declarator_list] '}' ) | ( '{' member_declarator_list ',' '}' )
member_declarator_list::= member_declarator (',' member_declarator) *
member_declarator::= simple_name | member_access | ( identifier '=' expression )
typeof_expression::=
    'typeof' '('   type   ')'
    | 'typeof' '(' (identifier [generic_dimension_specifier] | identifier '::' identifier [generic_dimension_specifier]  )+ ')'
    | 'typeof' '(' 'void' ')'


generic_dimension_specifier::='<' [(',')*] '>'


checked_expression::= 'checked' '(' expression ')'
unchecked_expression::= 'unchecked' '(' expression ')'
default_value_expression::= 'default' '(' type ')'
unary_expression::= primary_expression | ( '+' unary_expression ) | ( '_'   unary_expression )
    | ( '!'   unary_expression )| ( '~'   unary_expression )
    | pre_increment_expression | pre_decrement_expression | cast_expression

pre_increment_expression::= '++' unary_expression
pre_decrement_expression::= '--'   unary_expression
cast_expression::='(' type ')' unary_expression
right_shift::='>>'
right_shift_assignment::='>>='
conditional_expression::=comparative_expression
    | (comparative_expression '?' expression ':' expression)

comparative_expression::=
    (unary_expression
        (
            (
                ('*'|'%'|'/')
                | ('-'|'+')
                | ('<<' |right_shift)
                | ('<' | '>' | '<=' | '>=')
                | ('==' | '!=')
                | '&'
                | '^'
                | '|'
                | '&&'
                | '||'
                | '??'

            )
            (comparative_expression | unary_expression)
        )+
    )
    | (('is'|'as') (type|unary_expression))+
    | unary_expression


lambda_expression::=anonymous_function_signature '=>' anonymous_function_body
anonymous_method_expression::= 'delegate' [explicit_anonymous_function_signature] block
anonymous_function_signature::= explicit_anonymous_function_signature | implicit_anonymous_function_signature
explicit_anonymous_function_signature::='('  [explicit_anonymous_function_parameter_list] ')'
explicit_anonymous_function_parameter_list::=
    explicit_anonymous_function_parameter (',' explicit_anonymous_function_parameter)*

explicit_anonymous_function_parameter::= [anonymous_function_parameter_modifier] type identifier
anonymous_function_parameter_modifier::= 'ref' | 'out'
implicit_anonymous_function_signature::=('(' [implicit_anonymous_function_parameter_list] ')')
    | implicit_anonymous_function_parameter

implicit_anonymous_function_parameter_list::= implicit_anonymous_function_parameter
    (',' implicit_anonymous_function_parameter ) *

implicit_anonymous_function_parameter::=identifier
anonymous_function_body::=expression | block
query_expression::= (from_clause query_body)
from_clause::='from' [type] identifier 'in' expression
query_body::= [query_body_clauses] select_or_group_clause [query_continuation]
query_body_clauses::= query_body_clause *

query_body_clause::= from_clause | let_clause | where_clause | join_clause | join_into_clause | orderby_clause

let_clause::='let' identifier '='  expression
where_clause::='where' boolean_expression
join_clause::='join'  [type] identifier 'in' expression 'on' expression 'equals' expression
join_into_clause::='join' [type] identifier 'in' expression 'on' expression 'equals' expression 'into' identifier
orderby_clause::=orderby orderings
orderings::=ordering (',' ordering) *
ordering::= expression [ordering_direction]
ordering_direction::='ascending' | 'descending'
select_or_group_clause::=select_clause | group_clause
select_clause::='select'   expression
group_clause::='group' expression 'by' expression
query_continuation::='into'   identifier   query_body
assignment::= unary_expression | assignment_operator | expression
assignment_operator::= '=' | '+=' | '_=' | '*=' | '/=' | '%=' | '&=' | '|=' |'^=' |'<<=' | right_shift_assignment
expression::=non_assignment_expression | (unary_expression | assignment_operator expression)
non_assignment_expression::=conditional_expression | lambda_expression| query_expression
constant_expression::=expression
boolean_expression::=expression

//Statements
statement::=labeled_statement | declaration_statement | embedded_statement
embedded_statement::=block | empty_statement | expression_statement | selection_statement | iteration_statement
    | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement
    | yield_statement

block::='{' [statement_list] '}'
statement_list::= statement *
empty_statement::=';'
labeled_statement::= (identifier ':' statement)
declaration_statement::=(local_variable_declaration ';') | (local_constant_declaration ';')

local_variable_declaration::=(local_variable_type local_variable_declarators)

local_variable_type::=type | 'var'
local_variable_declarators::= local_variable_declarator [(',' local_variable_declarator) *]

local_variable_declarator::=identifier| ( identifier '=' local_variable_initializer )
local_variable_initializer::=expression | array_initializer
local_constant_declaration::=('const' type constant_declarators)

expression_statement::= (statement_expression ';' )
statement_expression::= invocation_expression | object_creation_expression | assignment | post_increment_expression
    post_decrement_expression | pre_increment_expression | pre_decrement_expression
selection_statement::=if_statement | switch_statement
if_statement::= ('if' '(' boolean_expression ')' embedded_statement)
    | ('if' '(' boolean_expression ')' embedded_statement 'else' embedded_statement)
switch_statement::='switch' '(' expression ')' switch_block
switch_block::='{' [switch_sections] '}'
switch_sections::= switch_section *

switch_section::=(switch_labels statement_list)
switch_labels::=switch_label *
switch_label::=('case' constant_expression ':' ) | ('default' ':' )
iteration_statement::=while_statement | do_statement | for_statement | foreach_statement
while_statement::=('while' '(' boolean_expression ')' embedded_statement )
do_statement::=('do' embedded_statement 'while' '(' boolean_expression ')' ';')
for_statement::=('for' '(' [for_initializer] ';' [for_condition] ';' [for_iterator] ')'  embedded_statement)
for_initializer::=local_variable_declaration | statement_expression_list
for_condition::=boolean_expression
for_iterator::=statement_expression_list
statement_expression_list::= statement_expression [(',' statement_expression) *]
foreach_statement::=('foreach' '(' local_variable_type identifier 'in' expression ')'   embedded_statement )
jump_statement::=break_statement | continue_statement | goto_statement | return_statement | throw_statement

break_statement::='break' ';'
continue_statement::='continue'  ';'
goto_statement::=('goto' identifier ';') | ('goto' 'case' constant_expression ';') | ('goto' 'default' ';' )
return_statement::= ('return' [expression] ';')
throw_statement::= ('throw' [expression] ';')
try_statement::=('try' block catch_clauses) | ('try' block finally_clause ) | ('try' block catch_clauses finally_clause )
catch_clauses::=
        (specific_catch_clauses [general_catch_clause])
    |   ([specific_catch_clauses] general_catch_clause)
specific_catch_clauses::=specific_catch_clause *
specific_catch_clause::=('catch' '(' class_type [identifier] ')'   block)
general_catch_clause::=('catch' block)
finally_clause::=('finally' block)
checked_statement::=('checked' block)
unchecked_statement::=('unchecked' block)
lock_statement::='lock' '(' expression ')' embedded_statement
using_statement::=('using' '(' resource_acquisition ')' embedded_statement)
resource_acquisition::= local_variable_declaration | expression
yield_statement::=('yield' 'return' expression ';') | ('yield' 'break' ';')

//Namespaces
compilation_unit::=([extern_alias_directives] [using_directives] [global_attributes] [namespace_member_declarations])
namespace_declaration::=('namespace' qualified_identifier namespace_body [';'])
qualified_identifier::=identifier [('.' identifier)*]
namespace_body::=('{' [extern_alias_directives] [using_directives] [namespace_member_declarations] '}')
extern_alias_directives::=extern_alias_directive *

extern_alias_directive::=('extern' 'alias' identifier ';')
using_directives::=using_directive*
using_directive::=using_alias_directive | using_namespace_directive

using_alias_directive::=('using' identifier '=' namespace_or_type_name ';')
using_namespace_directive::=('using' namespace_or_type_name ';')
namespace_member_declarations::= namespace_member_declaration *


namespace_member_declaration::=namespace_declaration | type_declaration

type_declaration::=class_declaration | struct_declaration | interface_declaration | enum_declaration
    | delegate_declaration
qualified_alias_member::=(identifier '::' identifier [type_argument_list])

//Classes
class_declaration::=([attributes] [class_modifiers] ['partial'] 'class' identifier [type_parameter_list]
		[class_base] [type_parameter_constraints_clauses] class_body   [';'])
class_modifiers::=class_modifier*
class_modifier::=('new' |'public' |'protected' |'internal' |'private' |'abstract' |'sealed' |'static')
type_parameter_list::=('<' type_parameters '>')
type_parameters::= ([attributes] type_parameter) [(','([attributes] type_parameter)) *]

class_base::=(':'   class_type) | (':'   interface_type_list) | (':'   class_type ','   interface_type_list)
interface_type_list::= interface_type [(',' interface_type)*]

type_parameter_constraints_clauses::=type_parameter_constraints_clause *
type_parameter_constraints_clause::=('where' type_parameter ':' type_parameter_constraints)
class_body::=('{' [class_member_declarations] '}')

type_parameter_constraints::=primary_constraint |secondary_constraints | constructor_constraint
    | (primary_constraint ',' secondary_constraints ) | (primary_constraint ',' constructor_constraint )
    | (secondary_constraints','   constructor_constraint )
    | (primary_constraint ',' secondary_constraints ',' constructor_constraint)
primary_constraint::=class_type | 'class' | 'struct'
secondary_constraints::=
    ((interface_type | type_parameter) (',' (interface_type | type_parameter |secondary_constraints))+)
    | interface_type | type_parameter


constructor_constraint::='new' '(' ')'
class_member_declarations::= class_member_declaration *
class_member_declaration::=constant_declaration |field_declaration |method_declaration |property_declaration
    |event_declaration |indexer_declaration |operator_declaration |constructor_declaration |destructor_declaration
    |static_constructor_declaration |type_declaration
constant_declaration::=([attributes] [constant_modifiers] 'const' type constant_declarators ';')
constant_modifiers::=constant_modifier *
constant_modifier::= 'new' | 'public' | 'protected' | 'internal' | 'private'
constant_declarators::=constant_declarator   [(',' constant_declarator)*]
constant_declarator::=identifier '=' constant_expression

field_declaration::=([attributes] [field_modifiers] type variable_declarators ';')
field_modifiers::= field_modifier *
field_modifier::= 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'readonly' | 'volatile'
variable_declarators::=variable_declarator (','  variable_declarator) *
variable_declarator::=identifier '=' variable_initializer
variable_initializer::=expression | array_initializer
method_declaration::=method_header method_body
method_header::=( [attributes] [method_modifiers] [partial] return_type member_name [type_parameter_list]
    '(' [formal_parameter_list] ')' [type_parameter_constraints_clauses])
method_modifiers::=method_modifier*
method_modifier::=('new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed'
    | 'override' | 'abstract' |'extern')
return_type::=type | 'void'
member_name::=identifier | (interface_type '.' identifier)
method_body::= block | ';'
formal_parameter_list::=fixed_parameters | (fixed_parameters ',' parameter_array) | parameter_array
fixed_parameters::=fixed_parameter  [(',' fixed_parameter) * ]
fixed_parameter::=[attributes] [parameter_modifier] type identifier [default_argument]
default_argument::=('=' expression)
parameter_modifier::=('ref'| 'out' | 'this')
parameter_array::=([attributes] 'params' array_type   identifier)
property_declaration::=([attributes] [property_modifiers] type member_name '{' accessor_declarations '}')
property_modifiers::= property_modifier *
property_modifier::='new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed'
    | 'override'| 'abstract' | 'extern'

accessor_declarations::=(get_accessor_declaration [set_accessor_declaration])
    | (set_accessor_declaration [get_accessor_declaration])
get_accessor_declaration::=([attributes] [accessor_modifier] 'get' accessor_body)
set_accessor_declaration::=([attributes] [accessor_modifier] 'set' accessor_body)
accessor_modifier::='protected' | 'internal' | 'private' | ('protected' 'internal') | ('internal' 'protected')
accessor_body::=block | ';'
event_declaration::=([attributes] [event_modifiers] 'event' type variable_declarators ';')
    | ([attributes] [event_modifiers] 'event' type member_name '{' event_accessor_declarations '}')

event_modifiers::=event_modifier*
event_modifier::='new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override'
    | 'abstract' | 'extern'

event_accessor_declarations::=(add_accessor_declaration remove_accessor_declaration) |
    (remove_accessor_declaration add_accessor_declaration)

add_accessor_declaration::=([attributes] 'add' block)
remove_accessor_declaration::=([attributes] 'remove' block)
indexer_declaration::=([attributes] [indexer_modifiers] indexer_declarator '{' accessor_declarations '}')
indexer_modifiers::=  indexer_modifier*

indexer_modifier::='new' | 'public' |'protected' | 'internal' | 'private' | 'virtual' | 'sealed' | 'override'
    | 'abstract'| 'extern'

indexer_declarator::=(type this '[' formal_parameter_list ']')
    | (type interface_type '.' this '[' formal_parameter_list ']')

operator_declaration::=([attributes] operator_modifiers   operator_declarator   operator_body)
operator_modifiers::=operator_modifier*
operator_modifier::= 'public' | 'static' | 'extern'
operator_declarator::=unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator
unary_operator_declarator::=(type 'operator' overloadable_unary_operator '(' type identifier ')')
overloadable_unary_operator::='+' | '-' | '!' | '~' | '++' | '--' | 'true' | 'false'
binary_operator_declarator::=(type 'operator' overloadable_binary_operator '(' type identifier ',' type identifier ')')
overloadable_binary_operator::='+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | right_shift | '==' | '!=' | '>'
    | '<' | '>=' | '<='

conversion_operator_declarator::=('implicit' 'operator' type '(' type identifier ')')
    | ('explicit' 'operator' type '(' type identifier ')')
operator_body::=block | ';'
constructor_declaration::=([attributes] [constructor_modifiers] constructor_declarator constructor_body)
constructor_modifiers::=  constructor_modifier*
constructor_modifier::='public' | 'protected' | 'internal' | 'private' | 'extern'
constructor_declarator::=(identifier '(' [formal_parameter_list] ')' [constructor_initializer])
constructor_initializer::=(':' 'base' '(' [argument_list] ')') | (':' 'this' '(' [argument_list] ')')
constructor_body::=block | ';'
static_constructor_declaration::=
    ([attributes] static_constructor_modifiers  identifier   '('  ')'  static_constructor_body)

static_constructor_modifiers::=(['extern'] 'static') | ('static' ['extern'])
static_constructor_body::=block | ';'
destructor_declaration::=([attributes] ['extern'] '~' identifier  '(' ')' destructor_body)
destructor_body::=block | ';'
//	Structs
struct_declaration::=([attributes] [struct_modifiers] [partial] 'struct' identifier [type_parameter_list]
    [struct_interfaces] [type_parameter_constraints_clauses] struct_body   [';'])
struct_modifiers::= struct_modifier*
struct_modifier::='new'|'public'|'protected'|'internal'|'private'
struct_interfaces::=(':' interface_type_list )
struct_body::=('{' [struct_member_declarations] '}')
struct_member_declarations::=  struct_member_declaration *
struct_member_declaration::=constant_declaration |field_declaration |method_declaration|property_declaration |event_declaration|indexer_declaration|operator_declaration|constructor_declaration |static_constructor_declaration |type_declaration
//	Arrays


rank_specifier::=('[' [dim_separators] ']')
dim_separators::= ','*
array_initializer::=('{' [variable_initializer_list] '}') | ('{'   variable_initializer_list ',' '}')
variable_initializer_list::=variable_initializer  [(',' variable_initializer)*]

// Interfaces
interface_declaration::=([attributes] [interface_modifiers] [partial] 'interface' identifier
    [variant_type_parameter_list] [interface_base] [type_parameter_constraints_clauses]   interface_body   [';'])
interface_modifiers::= interface_modifier*
interface_modifier::=('new' | 'public' | 'protected' | 'internal' | 'private')
variant_type_parameter_list::='<' variant_type_parameters   '>'
variant_type_parameters::= variant_type_parameter [(',' variant_type_parameter)*]
variant_type_parameter::=([attributes] [variance_annotation]  type_parameter)

variance_annotation::='in' | 'out'
interface_base::=(':' interface_type_list)
interface_body::=('{' [interface_member_declarations] '}')
interface_member_declarations::= interface_member_declaration*
interface_member_declaration::=interface_method_declaration | interface_property_declaration
    | interface_event_declaration | interface_indexer_declaration

interface_method_declaration::=([attributes] ['new'] return_type identifier type_parameter_list
    '(' [formal_parameter_list] ')' [type_parameter_constraints_clauses] ';')
interface_property_declaration::=([attributes]   ['new'] type identifier '{' interface_accessors '}')
interface_accessors::=([attributes] 'get' ';') | ([attributes] 'set' ';')
    | ([attributes] 'get' ';' [attributes] 'set' ';') | ([attributes] 'set' ';' [attributes] 'get' ';')
interface_event_declaration::=([attributes] ['new'] 'event' type identifier ';')
interface_indexer_declaration::=
    ([attributes] ['new']  type 'this' '[' formal_parameter_list ']' '{' interface_accessors '}')


// Enums
enum_declaration::=([attributes] [enum_modifiers] 'enum' identifier [enum_base] enum_body [';'])
enum_base::=':' integral_type
enum_body::=('{' [enum_member_declarations] '}') | ('{' enum_member_declarations ',' '}')
enum_modifiers::= enum_modifier*
enum_modifier::= 'new' | 'public' | 'protected' | 'internal' | 'private'
enum_member_declarations::=enum_member_declaration [(',' enum_member_declaration)*]
enum_member_declaration::=([attributes] identifier )| ( [attributes] identifier '=' constant_expression)

// Delegates
delegate_declaration::=([attributes] [delegate_modifiers] 'delegate' return_type identifier
    [variant_type_parameter_list] '(' [formal_parameter_list] ')' [type_parameter_constraints_clauses] ';')
delegate_modifiers::= delegate_modifier*
delegate_modifier::='new' | 'public' | 'protected' | 'internal' | 'private'
//Attributes
global_attributes::=global_attribute_sections
global_attribute_sections::=global_attribute_section*
global_attribute_section::=('[' global_attribute_target_specifier attribute_list ']')
    | ('[' global_attribute_target_specifier attribute_list ',' ']')
global_attribute_target_specifier::=(global_attribute_target ':' )
global_attribute_target::='assembly' | 'module'
attributes::=attribute_sections
attribute_sections::=   attribute_section*
attribute_section::=('[' [attribute_target_specifier] attribute_list ']')
    | ('[' [attribute_target_specifier] attribute_list ',' ']')
attribute_target_specifier::=(attribute_target ':')
attribute_target::='field' |'event' | 'method' | 'param' | 'property' | 'return' | 'type'
attribute_list::=(attribute [(','  attribute)*])
attribute::=(attribute_name [attribute_arguments])
attribute_name::=type_name
attribute_arguments::=('(' [positional_argument_list] ')') | ('(' positional_argument_list ',' named_argument_list ')')
    | ('(' named_argument_list ')')
positional_argument_list::=positional_argument [(',' positional_argument)*]
positional_argument::=([argument_name]   attribute_argument_expression)
named_argument_list::=named_argument  [(','  named_argument)*]
named_argument::=(identifier '=' attribute_argument_expression)
attribute_argument_expression::=expression

/*
A.2	Grammar extensions for unsafe code
class_modifier:
...
unsafe
struct-modifier:
...
unsafe
interface-modifier:
...
unsafe
delegate-modifier:
...
unsafe
field-modifier:
...
unsafe
method-modifier:
...
unsafe
property-modifier:
...
unsafe
event-modifier:
...
unsafe
indexer-modifier:
...
unsafe
operator-modifier:
...
unsafe
constructor-modifier:
...
unsafe
destructor-declaration:
attributesopt   externopt   unsafeopt   ~   identifier   (   )    destructor-body
attributesopt   unsafeopt   externopt   ~   identifier   (   )    destructor-body
static-constructor-modifiers:
externopt   unsafeopt   static
unsafeopt   externopt   static
externopt   static   unsafeopt
unsafeopt   static   externopt
static   externopt   unsafeopt
static   unsafeopt   externopt
embedded-statement:
...
unsafe-statement
fixed-statement
unsafe-statement:
unsafe   block
type:
...
pointer-type
pointer-type:
unmanaged-type   *
void   *
unmanaged-type:
type
primary-no-array-creation-expression:
...
pointer-member-access
pointer-element-access
sizeof-expression
unary-expression:
...
pointer-indirection-expression
addressof-expression
pointer-indirection-expression:
*   unary-expression
pointer-member-access:
primary-expression   ->   identifier  type-argument-listopt
pointer-element-access:
primary-no-array-creation-expression   [   expression   ]
addressof-expression:
&   unary-expression
sizeof-expression:
sizeof   (   unmanaged-type   )
fixed-statement:
fixed   (   pointer-type   fixed-pointer-declarators   )   embedded-statement
fixed-pointer-declarators:
fixed-pointer-declarator
fixed-pointer-declarators   ,   fixed-pointer-declarator
fixed-pointer-declarator:
identifier   =   fixed-pointer-initializer
fixed-pointer-initializer:
&   variable-reference
expression
struct-member-declaration:
…
fixed-size-buffer-declaration
fixed-size-buffer-declaration:
attributesopt   fixed-size-buffer-modifiersopt   fixed   buffer-element-type
		fixed-size-buffer-declarators   ;
fixed-size-buffer-modifiers:
fixed-size-buffer-modifier
fixed-size-buffer-modifier   fixed-size-buffer-modifiers
fixed-size-buffer-modifier:
new
public
protected
internal
private
unsafe
buffer-element-type:
type
fixed-size-buffer-declarators:
fixed-size-buffer-declarator
fixed-size-buffer-declarator   fixed-size-buffer-declarators
fixed-size-buffer-declarator:
identifier   [   constant-expression   ]
local-variable-initializer:
…
stackalloc-initializer
stackalloc-initializer:
stackalloc   unmanaged-type   [   expression   ]

*/