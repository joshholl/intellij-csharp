{

psiClassPrefix="CSharp"
psiImplClassSuffix="Impl"
psiPackage="com.github.joshholl.intellij.csharp.lang.psi"
psiImplPackage="com.github.joshholl.intellij.csharp.lang.psi.impl"

elementTypeHolderClass="com.github.joshholl.intellij.csharp.lang.lexer.CSharpTokenTypes"
elementTypeClass="com.github.joshholl.intellij.csharp.lang.lexer.CSharpElementType"
tokenTypeClass="com.github.joshholl.intellij.csharp.lang.lexer.CSharpElementType"

generateFirstCheck=100

}

//basic concepts
namespace-name::=namespace-or-type-name
type-name::= namespace-or-type-name
namespace-or-type-name::= (identifier   [type-argument-list]) [ ',' (identifier [type-argument-list])]| qualified-alias-member

// types
type::=( non-array-type | array-type)
non-array-type::=( type-name | simple-type | enum-type| type-parameter | class-type | interface-type | delegate-type)
    ['?']
array-type::=non-array-type rank-specifiers+
simple-type::= numeric-type | 'bool'
numeric-type::=integral-type | floating-point-type | 'decimal'
integral-type::= ('sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char')
floating-point-type::= 'float' | 'double'
enum-type::= type-name
class-type::= type-name | 'object' | 'dynamic' | 'string'
interface-type::= type-name
rank-specifiers::= rank-specifier *
delegate-type::= type-name
type-argument-list::= '<' type-arguments '>'
type-arguments::= type-argument [( ',' type-argument)*]
type-argument::=type
type-parameter::=identifier
predefined-type::= 'bool' | 'byte' | 'char' | 'decimal' | 'double'| 'float' | 'int' | 'long' | 'object' | 'sbyte'
    | 'short' | 'string' | 'uint' | 'ulong' | 'ushort'

//variables
variable-reference::=expression

//types

//Expressions
argument-list::= argument | (',' argument) *
argument::= [argument-name]  argument-value
argument-name::= identifier ':'
argument-value::= expression | ('ref'   variable-reference) | ('out'   variable-reference)


array-creation-expression::= ('new' non-array-type '[' expression-list ']' [rank-specifiers] [array-initializer])
    | ('new' array-type array-initializer) | ('new' rank-specifier array-initializer)

simple-name::=identifier [type-argument-list]
parenthesized-expression::= '(' expression ')'

primary-expression::= base-primary-expression expression-trail*
member-access::= base-primary-expression expression-trail+
invocation-expression::=base-primary-expression expression-trail+
post-increment-expression::=base-primary-expression expression-trail+
post-decrement-expression::=base-primary-expression expression-trail+

private expression-trail::=(
     '(' [argument-list] ')'
     '[' (expression-list | expression) ']'
     | '--'
     | '++'
     | '.' identifier [type-argument-list]
     )


private base-primary-expression::= (
    array-creation-expression
    | literal
    | simple-name
    | parenthesized-expression
    | predefined-type '.' identifier [type-argument-list]
    | qualified-alias-member '.' identifier
    | array-creation-expression '(' [argument-list] ')'
    | this-access
    | base-access
    | object-creation-expression
    | delegate-creation-expression
    | anonymous-object-creation-expression
    | typeof-expression
    | checked-expression
    | unchecked-expression
    | default-value-expression
    | anonymous-method-expression)



this-access::='this'
base-access::=( 'base' '.' identifier) | ( 'base' '['  argument-list ']' )


object-creation-expression::= ('new' type '('  [argument-list] ')' [object-or-collection-initializer])
    | ('new' type  object-or-collection-initializer)

object-or-collection-initializer::= object-initializer | collection-initializer
object-initializer::= ( '{' [member-initializer-list] '}' ) | ( '{' member-initializer-list   ','   '}')
member-initializer-list::= member-initializer ( ',' member-initializer) *
member-initializer::= identifier '='  initializer-value
initializer-value::= expression | object-or-collection-initializer
collection-initializer::= ('{' element-initializer-list '}') | ('{' element-initializer-list ',' '}')
element-initializer-list::= element-initializer ( ','  element-initializer) *
element-initializer::= non-assignment-expression | ('{'  expression-list '}')
expression-list::=expression ( ','  expression) *

delegate-creation-expression::= ('new' delegate-type '(' expression ')')

anonymous-object-creation-expression::= 'new' anonymous-object-initializer

anonymous-object-initializer::=( '{' [member-declarator-list] '}' ) | ( '{' member-declarator-list ',' '}' )
member-declarator-list::= member-declarator (',' member-declarator) *
member-declarator::= simple-name | member-access | ( identifier '=' expression )
typeof-expression::=
    'typeof' '('   type   ')'
    | 'typeof' '(' (identifier [generic-dimension-specifier] | identifier '::' identifier [generic-dimension-specifier]  )+ ')'
    | 'typeof' '(' 'void' ')'


generic-dimension-specifier::='<' [commas] '>'
commas::= ',' *

checked-expression::= 'checked' '(' expression ')'
unchecked-expression::= 'unchecked' '(' expression ')'
default-value-expression::= 'default' '(' type ')'
unary-expression::= primary-expression | ( '+' unary-expression ) | ( '-'   unary-expression )
    | ( '!'   unary-expression )| ( '~'   unary-expression )
    | pre-increment-expression | pre-decrement-expression | cast-expression

pre-increment-expression::= '++' unary-expression
pre-decrement-expression::= '--'   unary-expression
cast-expression::='(' type ')' unary-expression

additive-expression::=factor add-expression*

left add-expression::=('+'|'-') | factor
left mul-expression::=('*'|'/'|'%') add-expression
private factor::=unary-expression mul-expression *

right-shift::='>>'


conditional-expression::=null-coalescing-expression
    | (null-coalescing-expression '?' expression ':' expression)


null-coalescing-expression::=
    conditional-or-expression (('??') (conditional-or-expression|null-coalescing-expression))+
    | conditional-or-expression


conditional-or-expression::=
    conditional-and-expression (('||' (conditional-and-expression|conditional-or-expression))+)
    | conditional-and-expression

conditional-and-expression::=
    inclusive-or-expression (('&&') (inclusive-or-expression|conditional-and-expression))
    | inclusive-or-expression

inclusive-or-expression::=
    exclusive-or-expression (('|') (exclusive-or-expression | inclusive-or-expression))+
    |exclusive-or-expression

exclusive-or-expression::=
    and-expression ('^' (and-expression|exclusive-or-expression))
    | and-expression

and-expression::=
    equality-expression ('&' (equality-expression|and-expression))+
    | equality-expression

equality-expression::=relational-expression (('=='|'!=') (equality-expression|relational-expression))+
    | relational-expression

relational-expression::=
    (shift-expression (('<' | '>' | '<=' | '>=') (shift-expression| relational-expression))+)
    | (shift-expression (('is' | 'as') (type|shift-expression|relational-expression))+)
    | shift-expression

shift-expression::=(additive-expression (('<<'| right-shift)(shift-expression|additive-expression))+)
    | additive-expression

additive-expression::=(multiplicative-expression (('-'|'+') (additive-expression| multiplicative-expression))+)
    | multiplicative-expression

multiplicative-expression::=(unary-expression (('*'|'%'|'/') (multiplicative-expression | unary-expression))*)
    | unary-expression

lambda-expression::=anonymous-function-signature '=>' anonymous-function-body
anonymous-method-expression::= 'delegate' [explicit-anonymous-function-signature] block
anonymous-function-signature::= explicit-anonymous-function-signature | implicit-anonymous-function-signature
explicit-anonymous-function-signature::='('  [explicit-anonymous-function-parameter-list] ')'
explicit-anonymous-function-parameter-list::=
    explicit-anonymous-function-parameter (',' explicit-anonymous-function-parameter)*

explicit-anonymous-function-parameter::= [anonymous-function-parameter-modifier] type identifier
anonymous-function-parameter-modifier::= 'ref' | 'out'
implicit-anonymous-function-signature::=('(' [implicit-anonymous-function-parameter-list] ')')
    | implicit-anonymous-function-parameter

implicit-anonymous-function-parameter-list::= implicit-anonymous-function-parameter
    (',' implicit-anonymous-function-parameter ) *

implicit-anonymous-function-parameter::=identifier
anonymous-function-body::=expression | block
query-expression::= (from-clause query-body)
from-clause::='from' [type] identifier 'in' expression
query-body::= [query-body-clauses] select-or-group-clause [query-continuation]
query-body-clauses::= query-body-clause *

query-body-clause::= from-clause | let-clause | where-clause | join-clause | join-into-clause | orderby-clause

let-clause::='let' identifier '='  expression
where-clause::='where' boolean-expression
join-clause::='join'  [type] identifier 'in' expression 'on' expression 'equals' expression
join-into-clause::='join' [type] identifier 'in' expression 'on' expression 'equals' expression 'into' identifier
orderby-clause::=orderby orderings
orderings::=ordering (',' ordering) *
ordering::= expression [ordering-direction]
ordering-direction::='ascending' | 'descending'
select-or-group-clause::=select-clause | group-clause
select-clause::='select'   expression
group-clause::='group' expression 'by' expression
query-continuation::='into'   identifier   query-body
assignment::= unary-expression | assignment-operator | expression
assignment-operator::= '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' |'^=' |'<<=' | right-shift-assignment
expression::=non-assignment-expression | assignment
non-assignment-expression::=conditional-expression | lambda-expression| query-expression
constant-expression::=expression
boolean-expression::=expression

//Statements
statement::=labeled-statement | declaration-statement | embedded-statement
embedded-statement::=block | empty-statement | expression-statement | selection-statement | iteration-statement
    | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement
    | yield-statement

block::='{' [statement-list] '}'
statement-list::= statement *
empty-statement::=';'
labeled-statement::= (identifier ':' statement)
declaration-statement::=(local-variable-declaration ';') | (local-constant-declaration ';')

local-variable-declaration::=(local-variable-type local-variable-declarators)

local-variable-type::=type | 'var'
local-variable-declarators::= local-variable-declarator [(',' local-variable-declarator) *]

local-variable-declarator::=identifier| ( identifier '=' local-variable-initializer )
local-variable-initializer::=expression | array-initializer
local-constant-declaration::=('const' type constant-declarators)
constant-declarators::= constant-declarator [(',' constant-declarator)*]

constant-declarator::=identifier '=' constant-expression
expression-statement::= (statement-expression ';' )
statement-expression::= invocation-expression | object-creation-expression | assignment | post-increment-expression
    post-decrement-expression | pre-increment-expression | pre-decrement-expression
selection-statement::=if-statement | switch-statement
if-statement::= ('if' '(' boolean-expression ')' embedded-statement)
    | ('if' '(' boolean-expression ')' embedded-statement 'else' embedded-statement)
switch-statement::='switch' '(' expression ')' switch-block
switch-block::='{' [switch-sections] '}'
switch-sections::= switch-section *

switch-section::=(switch-labels statement-list)
switch-labels::=switch-label *
switch-label::=('case' constant-expression ':' ) | ('default' ':' )
iteration-statement::=while-statement | do-statement | for-statement | foreach-statement
while-statement::=('while' '(' boolean-expression ')' embedded-statement )
do-statement::=('do' embedded-statement 'while' '(' boolean-expression ')' ';')
for-statement::=('for' '(' [for-initializer] ';' [for-condition] ';' [for-iterator] ')'  embedded-statement)
for-initializer::=local-variable-declaration | statement-expression-list
for-condition::=boolean-expression
for-iterator::=statement-expression-list
statement-expression-list::= statement-expression [(',' statement-expression) *]
foreach-statement::=('foreach' '(' local-variable-type identifier 'in' expression ')'   embedded-statement )
jump-statement::=break-statement | continue-statement | goto-statement | return-statement | throw-statement

break-statement::='break' ';'
continue-statement::='continue'  ';'
goto-statement::=('goto' identifier ';') | ('goto' 'case' constant-expression ';') | ('goto' 'default' ';' )
return-statement::= ('return' [expression] ';')
throw-statement::= ('throw' [expression] ';')
try-statement::=('try' block catch-clauses) | ('try' block finally-clause ) | ('try' block catch-clauses finally-clause )
catch-clauses::=(specific-catch-clauses [general-catch-clause]) |([specific-catch-clauses] general-catch-clause)
specific-catch-clauses::=specific-catch-clause *
specific-catch-clause::=('catch' '(' class-type [identifier] ')'   block)
general-catch-clause::=('catch' block)
finally-clause::=('finally' block)
checked-statement::=('checked' block)
unchecked-statement::=('unchecked' block)
lock-statement::='lock' '(' expression ')' embedded-statement
using-statement::=('using' '(' resource-acquisition ')' embedded-statement)
resource-acquisition::= local-variable-declaration | expression
yield-statement::=('yield' 'return' expression ';') | ('yield' 'break' ';')

//Namespaces
compilation-unit::=([extern-alias-directives] [using-directives] [global-attributes] [namespace-member-declarations])
namespace-declaration::=('namespace' qualified-identifier namespace-body [';'])
qualified-identifier::=identifier [('.' identifier)*]
namespace-body::=('{' [extern-alias-directives] [using-directivea] [namespace-member-declarations] '}')
extern-alias-directives::=extern-alias-directive *

extern-alias-directive::=('extern' 'alias' identifier ';')
using-directives::=using-directive*
using-directive::=using-alias-directive | using-namespace-directive

using-alias-directive::=('using' identifier '=' namespace-or-type-name ';')
using-namespace-directive::=('using' namespace-name ';')
namespace-member-declarations::= namespace-member-declaration *

namespace-member-declaration::=namespace-declaration | type-declaration

type-declaration::=class-declaration | struct-declaration | interface-declaration | enum-declaration
    | delegate-declaration
qualified-alias-member::=(identifier '::' identifier [type-argument-list])

//Classes
class-declaration::=([attributes] [class-modifiers] ['partial'] 'class' identifier [type-parameter-list]
		[class-base] [type-parameter-constraints-clauses] class-body   [';'])
class-modifiers::=class-modifier*
class-modifier::=('new' |'public' |'protected' |'internal' |'private' |'abstract' |'sealed' |'static')
type-parameter-list::=('<' type-parameters '>')
type-parameters::= ([attributes] type-parameter) [(','([attributes] type-parameter)) *]

class-base::=(':'   class-type) | (':'   interface-type-list) | (':'   class-type ','   interface-type-list)
interface-type-list::= interface-type [(',' interface-type)*]

type-parameter-constraints-clauses::=type-parameter-constraints-clause *
type-parameter-constraints-clause::=('where' type-parameter ':' type-parameter-constraints)
class-body::=('{' [class-member-declarations] '}')

type-parameter-constraints::=primary-constraint |secondary-constraints | constructor-constraint
    | (primary-constraint ',' secondary-constraints ) | (primary-constraint ',' constructor-constraint )
    | (secondary-constraints','   constructor-constraint )
    | (primary-constraint ',' secondary-constraints ',' constructor-constraint)
primary-constraint::=class-type | 'class' | 'struct'
secondary-constraints::=  interface-type | type-parameter | (secondary-constraints ',' interface-type)
    | (secondary-constraints ',' type-parameter)
constructor-constraint::='new' '(' ')'
class-member-declarations::= class-member-declaration *
class-member-declaration::=constant-declaration |field-declaration |method-declaration |property-declaration
    |event-declaration |indexer-declaration |operator-declaration |constructor-declaration |destructor-declaration
    |static-constructor-declaration |type-declaration
constant-declaration::=([attributes] [constant-modifiers] 'const' type constant-declarators ';')
constant-modifiers::=constant-modifier *
constant-modifier::= 'new' | 'public' | 'protected' | 'internal' | 'private'
constant-declarators::=constant-declarator   [(',' constant-declarator)*]
constant-declarator::=identifier '=' constant-expression
field-declaration::=([attributes] [field-modifiers] type variable-declarators ';')
field-modifiers::= field-modifier *
field-modifier::= 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'readonly' | 'volatile'
variable-declarators::=variable-declarator (','  variable-declarator) *
variable-declarator::=identifier '=' variable-initializer
variable-initializer::=expression | array-initializer
method-declaration::=method-header method-body
method-header::=( [attributes] [method-modifiers] [partial] return-type member-name [type-parameter-list]
    '(' [formal-parameter-list] ')' [type-parameter-constraints-clauses])
method-modifiers::=method-modifier*
method-modifier::=('new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed'
    | 'override' | 'abstract' |'extern')
return-type::=type | 'void'
member-name::=identifier | (interface-type '.' identifier)
method-body::= block | ';'
formal-parameter-list::=fixed-parameters | (fixed-parameters ',' parameter-array) | parameter-array
fixed-parameters::=fixed-parameter  [(',' fixed-parameter) * ]
fixed-parameter::=[attributes] [parameter-modifier] type identifier [default-argument]
default-argument::=('=' expression)
parameter-modifier::=('ref'| 'out' | 'this')
parameter-array::=([attributes] 'params' array-type   identifier)
property-declaration::=([attributes] [property-modifiers] type member-name '{' accessor-declarations '}')
property-modifiers::= property-modifier *
property-modifier::='new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed'
    | 'override'| 'abstract' | 'extern'

member-name::=identifier | (interface-type '.' identifier)
accessor-declarations::=(get-accessor-declaration [set-accessor-declaration])
    | (set-accessor-declaration [get-accessor-declaration])
get-accessor-declaration::=([attributes] [accessor-modifier] 'get' accessor-body)
set-accessor-declaration::=([attributes] [accessor-modifier] 'set' accessor-body)
accessor-modifier::='protected' | 'internal' | 'private' | ('protected' 'internal') | ('internal' 'protected')
accessor-body::=block | ';'
event-declaration::=([attributes] [event-modifiers] 'event' type variable-declarators ';')
    | ([attributes] [event-modifiers] 'event' type member-name '{' event-accessor-declarations '}')

event-modifiers::=event-modifier*
event-modifier::='new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override'
    | 'abstract' | 'extern'

event-accessor-declarations::=(add-accessor-declaration remove-accessor-declaration) |
    (remove-accessor-declaration add-accessor-declaration)

add-accessor-declaration::=([attributes] 'add' block)
remove-accessor-declaration::=([attributes] 'remove' block)
indexer-declaration::=([attributes] [indexer-modifiers] indexer-declarator '{' accessor-declarations '}')
indexer-modifiers::=  indexer-modifier*

indexer-modifier::='new' | 'public' |'protected' | 'internal' | 'private' | 'virtual' | 'sealed' | 'override'
    | 'abstract'| 'extern'

indexer-declarator::=(type this '[' formal-parameter-list ']')
    | (type interface-type '.' this '[' formal-parameter-list ']')

operator-declaration::=([attributes] operator-modifiers   operator-declarator   operator-body)
operator-modifiers::=operator-modifier*
operator-modifier::= 'public' | 'static' | 'extern'
operator-declarator::=unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator
unary-operator-declarator::=(type 'operator' overloadable-unary-operator '(' type identifier ')')
overloadable-unary-operator::='+' | '-' | '!' | '~' | '++' | '--' | 'true' | 'false'
binary-operator-declarator::=(type 'operator' overloadable-binary-operator '(' type identifier ',' type identifier ')')
overloadable-binary-operator::='+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | right-shift | '==' | '!=' | '>'
    | '<' | '>=' | '<='

conversion-operator-declarator::=('implicit' 'operator' type '(' type identifier ')')
    | ('explicit' 'operator' type '(' type identifier ')')
operator-body::=block | ';'
constructor-declaration::=([attributes] [constructor-modifiers] constructor-declarator constructor-body)
constructor-modifiers::=  constructor-modifier*
constructor-modifier::='public' | 'protected' | 'internal' | 'private' | 'extern'
constructor-declarator::=(identifier '(' [formal-parameter-list] ')' [constructor-initializer])
constructor-initializer::=(':' 'base' '(' [argument-list] ')') | (':' 'this' '(' [argument-list] ')')
constructor-body::=block | ';'
static-constructor-declaration::=
    ([attributes] static-constructor-modifiers  identifier   '('  ')'  static-constructor-body)

static-constructor-modifiers::=(['extern'] 'static') | ('static' ['extern'])
static-constructor-body::=block | ';'
destructor-declaration::=([attributes] ['extern'] '~' identifier  '(' ')' destructor-body)
destructor-body::=block | ';'
//	Structs
struct-declaration::=([attributes] [struct-modifiers] [partial] 'struct' identifier [type-parameter-list]
    [struct-interfaces] [type-parameter-constraints-clauses] struct-body   [';'])
struct-modifiers::= struct-modifier*
struct-modifier::='new'|'public'|'protected'|'internal'|'private'
struct-interfaces::=(':' interface-type-list )
struct-body::=('{' [struct-member-declarations] '}')
struct-member-declarations::=  struct-member-declaration *
struct-member-declaration::=constant-declaration |field-declaration |method-declaration|property-declaration |event-declaration|indexer-declaration|operator-declaration|constructor-declaration |static-constructor-declaration |type-declaration
//	Arrays


rank-specifier::=('[' [dim-separators] ']')
dim-separators::= ','*
array-initializer::=('{' [variable-initializer-list] '}') | ('{'   variable-initializer-list ',' '}')
variable-initializer-list::=variable-initializer  [(',' variable-initializer)*]

// Interfaces
interface-declaration::=([attributes] [interface-modifiers] [partial] 'interface' identifier
    [variant-type-parameter-list] [interface-base] [type-parameter-constraints-clauses]   interface-body   [';'])
interface-modifiers::= interface-modifier*
interface-modifier::=('new' | 'public' | 'protected' | 'internal' | 'private')
variant-type-parameter-list::='<' variant-type-parameters   '>'
variant-type-parameters::=([attributes] [variance-annotation]  type-parameter)
    | (variant-type-parameters ',' [attributes] [variance-annotation] type-parameter)
variance-annotation::='in' | 'out'
interface-base::=(':' interface-type-list)
interface-body::=('{' [interface-member-declarations] '}')
interface-member-declarations::= interface-member-declaration*
interface-member-declaration::=interface-method-declaration | interface-property-declaration
    | interface-event-declaration | interface-indexer-declaration

interface-method-declaration::=([attributes] ['new'] return-type identifier type-parameter-list
    '(' [formal-parameter-list] ')' [type-parameter-constraints-clauses] ';')
interface-property-declaration::=([attributes]   ['new'] type identifier '{' interface-accessors '}')
interface-accessors::=([attributes] 'get' ';') | ([attributes] 'set' ';')
    | ([attributes] 'get' ';' [attributes] 'set' ';') | ([attributes] 'set' ';' [attributes] 'get' ';')
interface-event-declaration::=([attributes] ['new'] 'event' type identifier ';')
interface-indexer-declaration::=
    ([attributes] ['new']  type 'this' '[' formal-parameter-list ']' '{' interface-accessors '}')


// Enums
enum-declaration::=([attributes] [enum-modifiers] 'enum' identifier [enum-base] enum-body [';'])
enum-base::=':' integral-type
enum-body::=('{' [enum-member-declarations] '}') | ('{' enum-member-declarations ',' '}')
enum-modifiers::= enum-modifier*
enum-modifier::= 'new' | 'public' | 'protected' | 'internal' | 'private'
enum-member-declarations::=enum-member-declaration [(',' enum-member-declaration)*]
enum-member-declaration::=([attributes] identifier )| ( [attributes] identifier '=' constant-expression)

// Delegates
delegate-declaration::=([attributes] [delegate-modifiers] 'delegate' return-type identifier
    [variant-type-parameter-list] '(' [formal-parameter-list] ')' [type-parameter-constraints-clauses] ';')
delegate-modifiers::= delegate-modifier*
delegate-modifier::='new' | 'public' | 'protected' | 'internal' | 'private'
//Attributes
global-attributes::=global-attribute-sections
global-attribute-sections::=global-attribute-section*
global-attribute-section::=('[' global-attribute-target-specifier attribute-list ']')
    | ('[' global-attribute-target-specifier attribute-list ',' ']')
global-attribute-target-specifier::=(global-attribute-target ':' )
global-attribute-target::='assembly' | 'module'
attributes::=attribute-sections
attribute-sections::=   attribute-section*
attribute-section::=('[' [attribute-target-specifier] attribute-list ']')
    | ('[' [attribute-target-specifier] attribute-list ',' ']')
attribute-target-specifier::=(attribute-target ':')
attribute-target::='field' |'event' | 'method' | 'param' | 'property' | 'return' | 'type'
attribute-list::=(attribute [(','  attribute)*])
attribute::=(attribute-name [attribute-arguments])
attribute-name::=type-name
attribute-arguments::=('(' [positional-argument-list] ')') | ('(' positional-argument-list ',' named-argument-list ')')
    | ('(' named-argument-list ')')
positional-argument-list::=positional-argument [(',' positional-argument)*]
positional-argument::=([argument-name]   attribute-argument-expression)
named-argument-list::=named-argument  [(','  named-argument)*]
named-argument::=(identifier '=' attribute-argument-expression)
attribute-argument-expression::=expression

/*
A.2	Grammar extensions for unsafe code
class-modifier:
...
unsafe
struct-modifier:
...
unsafe
interface-modifier:
...
unsafe
delegate-modifier:
...
unsafe
field-modifier:
...
unsafe
method-modifier:
...
unsafe
property-modifier:
...
unsafe
event-modifier:
...
unsafe
indexer-modifier:
...
unsafe
operator-modifier:
...
unsafe
constructor-modifier:
...
unsafe
destructor-declaration:
attributesopt   externopt   unsafeopt   ~   identifier   (   )    destructor-body
attributesopt   unsafeopt   externopt   ~   identifier   (   )    destructor-body
static-constructor-modifiers:
externopt   unsafeopt   static
unsafeopt   externopt   static
externopt   static   unsafeopt
unsafeopt   static   externopt
static   externopt   unsafeopt
static   unsafeopt   externopt
embedded-statement:
...
unsafe-statement
fixed-statement
unsafe-statement:
unsafe   block
type:
...
pointer-type
pointer-type:
unmanaged-type   *
void   *
unmanaged-type:
type
primary-no-array-creation-expression:
...
pointer-member-access
pointer-element-access
sizeof-expression
unary-expression:
...
pointer-indirection-expression
addressof-expression
pointer-indirection-expression:
*   unary-expression
pointer-member-access:
primary-expression   ->   identifier  type-argument-listopt
pointer-element-access:
primary-no-array-creation-expression   [   expression   ]
addressof-expression:
&   unary-expression
sizeof-expression:
sizeof   (   unmanaged-type   )
fixed-statement:
fixed   (   pointer-type   fixed-pointer-declarators   )   embedded-statement
fixed-pointer-declarators:
fixed-pointer-declarator
fixed-pointer-declarators   ,   fixed-pointer-declarator
fixed-pointer-declarator:
identifier   =   fixed-pointer-initializer
fixed-pointer-initializer:
&   variable-reference
expression
struct-member-declaration:
…
fixed-size-buffer-declaration
fixed-size-buffer-declaration:
attributesopt   fixed-size-buffer-modifiersopt   fixed   buffer-element-type
		fixed-size-buffer-declarators   ;
fixed-size-buffer-modifiers:
fixed-size-buffer-modifier
fixed-size-buffer-modifier   fixed-size-buffer-modifiers
fixed-size-buffer-modifier:
new
public
protected
internal
private
unsafe
buffer-element-type:
type
fixed-size-buffer-declarators:
fixed-size-buffer-declarator
fixed-size-buffer-declarator   fixed-size-buffer-declarators
fixed-size-buffer-declarator:
identifier   [   constant-expression   ]
local-variable-initializer:
…
stackalloc-initializer
stackalloc-initializer:
stackalloc   unmanaged-type   [   expression   ]

*/